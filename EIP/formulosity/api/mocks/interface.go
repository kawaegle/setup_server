// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/plutov/formulosity/api/pkg/types"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Interface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSurvey provides a mock function with given fields: survey
func (_m *Interface) CreateSurvey(survey *types.Survey) error {
	ret := _m.Called(survey)

	if len(ret) == 0 {
		panic("no return value specified for CreateSurvey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Survey) error); ok {
		r0 = rf(survey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSurveySession provides a mock function with given fields: session
func (_m *Interface) CreateSurveySession(session *types.SurveySession) error {
	ret := _m.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for CreateSurveySession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.SurveySession) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSurveyByField provides a mock function with given fields: field, value
func (_m *Interface) GetSurveyByField(field string, value interface{}) (*types.Survey, error) {
	ret := _m.Called(field, value)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveyByField")
	}

	var r0 *types.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (*types.Survey, error)); ok {
		return rf(field, value)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) *types.Survey); ok {
		r0 = rf(field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(field, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveyQuestions provides a mock function with given fields: surveyID
func (_m *Interface) GetSurveyQuestions(surveyID int64) ([]types.Question, error) {
	ret := _m.Called(surveyID)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveyQuestions")
	}

	var r0 []types.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]types.Question, error)); ok {
		return rf(surveyID)
	}
	if rf, ok := ret.Get(0).(func(int64) []types.Question); ok {
		r0 = rf(surveyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Question)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(surveyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveySession provides a mock function with given fields: surveyUUID, sessionUUID
func (_m *Interface) GetSurveySession(surveyUUID string, sessionUUID string) (*types.SurveySession, error) {
	ret := _m.Called(surveyUUID, sessionUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveySession")
	}

	var r0 *types.SurveySession
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*types.SurveySession, error)); ok {
		return rf(surveyUUID, sessionUUID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *types.SurveySession); ok {
		r0 = rf(surveyUUID, sessionUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SurveySession)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(surveyUUID, sessionUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveySessionAnswers provides a mock function with given fields: sessionUUID
func (_m *Interface) GetSurveySessionAnswers(sessionUUID string) ([]types.QuestionAnswer, error) {
	ret := _m.Called(sessionUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveySessionAnswers")
	}

	var r0 []types.QuestionAnswer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]types.QuestionAnswer, error)); ok {
		return rf(sessionUUID)
	}
	if rf, ok := ret.Get(0).(func(string) []types.QuestionAnswer); ok {
		r0 = rf(sessionUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.QuestionAnswer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveySessionByIPAddress provides a mock function with given fields: surveyUUID, ipAddr
func (_m *Interface) GetSurveySessionByIPAddress(surveyUUID string, ipAddr string) (*types.SurveySession, error) {
	ret := _m.Called(surveyUUID, ipAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveySessionByIPAddress")
	}

	var r0 *types.SurveySession
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*types.SurveySession, error)); ok {
		return rf(surveyUUID, ipAddr)
	}
	if rf, ok := ret.Get(0).(func(string, string) *types.SurveySession); ok {
		r0 = rf(surveyUUID, ipAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SurveySession)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(surveyUUID, ipAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveySessionsWithAnswers provides a mock function with given fields: surveyUUID, filter
func (_m *Interface) GetSurveySessionsWithAnswers(surveyUUID string, filter *types.SurveySessionsFilter) ([]types.SurveySession, int, error) {
	ret := _m.Called(surveyUUID, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveySessionsWithAnswers")
	}

	var r0 []types.SurveySession
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, *types.SurveySessionsFilter) ([]types.SurveySession, int, error)); ok {
		return rf(surveyUUID, filter)
	}
	if rf, ok := ret.Get(0).(func(string, *types.SurveySessionsFilter) []types.SurveySession); ok {
		r0 = rf(surveyUUID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.SurveySession)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *types.SurveySessionsFilter) int); ok {
		r1 = rf(surveyUUID, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, *types.SurveySessionsFilter) error); ok {
		r2 = rf(surveyUUID, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSurveys provides a mock function with given fields:
func (_m *Interface) GetSurveys() ([]*types.Survey, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSurveys")
	}

	var r0 []*types.Survey
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.Survey, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.Survey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Survey)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *Interface) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrate provides a mock function with given fields:
func (_m *Interface) Migrate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *Interface) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSurvey provides a mock function with given fields: survey
func (_m *Interface) UpdateSurvey(survey *types.Survey) error {
	ret := _m.Called(survey)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSurvey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Survey) error); ok {
		r0 = rf(survey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSurveySessionStatus provides a mock function with given fields: sessionUUID, newStatus
func (_m *Interface) UpdateSurveySessionStatus(sessionUUID string, newStatus types.SurveySessionStatus) error {
	ret := _m.Called(sessionUUID, newStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSurveySessionStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.SurveySessionStatus) error); ok {
		r0 = rf(sessionUUID, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertSurveyQuestionAnswer provides a mock function with given fields: sessionUUID, questionUUID, answer
func (_m *Interface) UpsertSurveyQuestionAnswer(sessionUUID string, questionUUID string, answer types.Answer) error {
	ret := _m.Called(sessionUUID, questionUUID, answer)

	if len(ret) == 0 {
		panic("no return value specified for UpsertSurveyQuestionAnswer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, types.Answer) error); ok {
		r0 = rf(sessionUUID, questionUUID, answer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertSurveyQuestions provides a mock function with given fields: survey
func (_m *Interface) UpsertSurveyQuestions(survey *types.Survey) error {
	ret := _m.Called(survey)

	if len(ret) == 0 {
		panic("no return value specified for UpsertSurveyQuestions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Survey) error); ok {
		r0 = rf(survey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
